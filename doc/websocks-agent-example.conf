#
# The listening socks5 port
# The field is optional, if not specified or set to 0, socks5 will be disabled.
#
# Alias: `agent.listen`
#
agent.socks5.listen 11080

#
# The listening http connect port
# The field is optional, if not specified or set to 0, http connect will be disabled.
#
agent.httpconnect.listen 18080

#
# The listening ss port
# The field is optional, if not specified or set to 0, ss will be disabled.
# Note: only aes-256-cfb is supported
#
agent.ss.listen 8388
#
# The password for ss
# The field is required if agent.ss.listen is set.
#
agent.ss.password 123456

#
# The listening dns server port
# The field is optional, if not specified or set to 0, dns server will be disabled
#
agent.dns.listen 53

#
# The admin server listening port
# The field is optional, if not specified, admin server will be disabled
# If configuration file is not present, the admin server will start and listen on port 44380 as default
# Visit http://127.0.0.1:44380 in your browser to generate your configuration
#
agent.admin.listen 44380

#
# Enable auto certificate signing for https-sni-erasure. Default: empty configuration
# Omit the config to disable auto-signing
# This requires your platform to have a standard version of openssl command-line apps installed,
# and configured in environment variables ($PATH).
# OpenSSL is installed by default on Linux and MacOS, not on Windows.
#
# Also note that, since the certs are generated when request comes, the first request of a new domain MIGHT
# fail because the `NotBefore` field in the x509 cert is set AFTER request begins. Retry the request and everything
# will be OK.
#
# The first variable should be the ca cert.
# The second variable should be the ca private key.
# The third variable can be omitted, which means the working directory used to store the certificates/keys.
# When the third variable is omitted, a temporary directory will be allocated on startup.
#
# Go to misc/ca directory and use the provided script to generate your own ca.
#
agent.https-sni-erasure.cert-key.auto-sign ~/ca.cert.pem ~/ca.key.pem

#
# The certificate used by https-sni-erasure.
# If you do not want to enable auto ca, this list give you the ability to directly set the certs/keys to be used
# The list is optional.
# Each line represents one cert(s)|key tuple for one domain, and private key must be the last file on each line
#
# Theses self signed ca and certs can be generated using the scripts provided in misc/ca directory.
#
agent.https-sni-erasure.cert-key.list.start
    ~/pixiv.cert.pem ~/pixiv.key.pem
    ~/google.cert.pem ~/google.key.pem
agent.https-sni-erasure.cert-key.list.end

#
# Enable/Disable the direct-relay. Default off
# When enabled, the agent will try to listen on 80 and 443 for http and https,
# and the domains defined in `https-sni-erasure.domain.list` and `proxy.domain.list` will be resolved to the agent.
#
# Note: enabling this function requires root privilege
#
agent.direct-relay off

#
# Set the ip range used for the agent to listen, resolve and handle proxy. Default empty.
# The agent will handle all ips and ports(1-65535) in the ip range, dns server will resolve domains on these ips.
#
# Note: This feature only works on linux systems supporting tproxy. Local route table and iptables should be set accordingly.
# Note: the network connectivity of clients to these ips should be guaranteed by user, usually put them in the same L2 network would be fine.
#
# Omit this field will disable this feature. The agent will only bind on 80 and 443.
# If this field is set, then you should set the `agent.direct-relay.listen` as well, and turn on `agent.direct-relay`
#
agent.direct-relay.ip-range 100.64.0.0/10

#
# Set the ip and port for the agent to listen for all ip and ports defined in ip-range. Default empty
# The agent will handle all ips and ports(1-65535) in the ip range, dns server will resolve domains on these ips.
#
# Note: This feature only works on linux systems supporting tproxy. Local route table and iptables should be set accordingly.
# Note: the network connectivity of clients to these ips should be guaranteed by user, usually put them in the same L2 network would be fine.
#
# Omit this field will disable this feature. The agent will only bind on 80 and 443.
# If this field is set, then you should set the `agent.direct-relay.ip-range` as well, and turn on `agent.direct-relay`
#
agent.direct-relay.listen 127.0.0.1:8888

#
# Set the timeout for an ip bond. Default 10 seconds.
# Will not be working if `agent.direct-relay.ip-range` and `agent.direct-relay.listen` not set.
# Set to 0 or negative will disable the timeout, you have to make sure the ip-range large enough.
#
agent.direct-relay.ip-bond-timeout 10

#
# The username and password pair separated by a `:`
#
proxy.server.auth alice:pasSw0rD

#
# Whether to do health check on servers
# default: on
#
proxy.server.hc on

#
# These two fields are optional if your server is using a valid certificate
# Otherwise these fields should be set to trust your server.
#
# Note: the cacerts file should be in JKS format, use keytool to generate one.
#
agent.cacerts.path ./dep/cacerts
agent.cacerts.pswd changeit

#
# This field is optional, default `on`.
# Set to `on` to let the vproxy verify whether server certificate is valid.
# Note: When setting to `off`, the vproxy will log a warning every time new tls connection establishes.
#
agent.cert.verify on

#
# This field is optional, default to `off`
# When enabled, the agent will listen on 0.0.0.0 instead of 127.0.0.1.
# This option turns your host into a socks5 gateway.
# However you should know that password is not supported.
#
agent.gateway on

#
# This field is optional
# Specify the pac server's ip address and listening port.
#
# NOTE: usually, you need to set agent.gateway to on
#
agent.gateway.pac.listen 20080

#
# This field is optional, default to `off`
# When enabled, all net flow follows specifications of the sub protocols
# Otherwise an optimization may apply
# It's recommended to turn off this flag if network rtt is high
#
agent.strict off

#
# This field is optional, default to `10`
# Set the connection pool size.
# You can set this field to 0 to disable pooling
#
agent.pool 10

#
# ABOUT SYMBOLS:
#
# Symbols can be attached to `proxy.server.list.start` or `proxy.domain.list.start`.
# If not attached with any symbol, the symbol will be set to "DEFAULT".
#
# When a request arrives, the agent will check for domain in all domain lists
# (however, the order is an undefined behavior, except that DEFAULT list is always checked last).
# If any rule matches, the agent will retrieve the symbol of the list which contains the matched rule.
# Then the agent will get the SERVER list with the SAME symbol attached,
# and will get a healthy server from the server list to handle the proxy.
#

#
# The list of proxy server address
# use websocks:// for tcp connections
# use websockss:// for tls connections
# use websocks:kcp:// for unencrypted kcp connections
# use websockss:kcp:// for tls encrypted kcp connections
#
# This `proxy.server.list.start` example statement is not followed by any symbol,
# which will automatically append a `DEFAULT` symbol by the agent.
#
# NOTE: port should ALWAYS be specified, even if it's 80 or 443
#
proxy.server.list.start
    websockss://127.0.0.1:18686
    websockss:kcp://example.com:443
proxy.server.list.end

#
# The list of proxy server address
# This `proxy.server.list.start` example statement is followed by a symbol named `TEST`.
#
proxy.server.list.start TEST
    websocks://127.0.0.1:18687
proxy.server.list.end

#
# The list of domains which DO require proxying.
# This `proxy.domain.list.start` example statement is not followed by any symbol,
# which will automatically append a `DEFAULT` symbol by the agent.
#
# The elements of the list allows:
# 1. domain suffix, plain text, e.g. youtube.com
# 2. ip addresses text strings. ipv6 should not omit zeros
# 3. regexp, surrounded by two `/`, e.g. /.*google\.com.*/
# 4. base64 encoded abp file, surrounded by `[` and `]`, e.g. [~/gfwlist.txt]
# 5. port number, started by `:`, e.g. :22, to proxy ssh traffic via the proxy
#
proxy.domain.list.start
    /.*google\.com.*/
    216.58.200.46
    youtube.com
    zh.wikipedia.org
    id.heroku.com
    baidu.com
    /.*bilibili\.com$/
proxy.domain.list.end

#
# The list of domains which DO require proxying.
# This `proxy.domain.list.start` example statement is followed by a symbol named `TEST`.
#
proxy.domain.list.start TEST
    163.com
    :14000
proxy.domain.list.end

#
# The list of domains that need to be resolved on the server side.
# This list is optional.
# The `proxy.resolve.list.start` statement can be followed by a symbol
# indicating the servers list to be used to do the resolving
# Supports all syntax in the proxy.domain.list
#
proxy.resolve.list.start
    pixiv.net
proxy.resolve.list.end

#
# The list of domains that do NOT need to go through proxy, which can be used as a whitelist
# This list is optional.
# Supports all syntax in the proxy.domain.list, e.g. [~/gfw_whitelist]
#
no-proxy.domain.list.start
    /.*pixiv.*/
no-proxy.domain.list

#
# The list of domains that need to do HTTPS SNI Erasure.
# This list is optional.
# Requests to :80 will be redirected to :443
# Requests to :443 will be terminated and will start a different https request
# Then make proxy from one tls connection to another
# Note that the new tls connection will not send sni, and only supports http/1.1 alpn
# When this list is set, one of `agent.https-sni-erasure.cert-key.list` OR `agent.auto-sign` must be set as well
#
https-sni-erasure.domain.list.start
    /.*pixiv.*/
https-sni-erasure.domain.list.end

# -------
# EOF
# -------
